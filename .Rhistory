knitr::opts_chunk$set(echo = TRUE)
# Create a custom color palette from green (0) to red (30)
custom_palette <- colorRampPalette(c("green", "yellow", "orange", "red"))(10)
custom_palette <- colorBin(custom_palette, c(0, 30), 10, pretty = FALSE)
# load necessary libraries
library(sf)
library(dplyr)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(spatstat)
library(leafem)
library(raster)
# path locations
output_path <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/outputs"
input_path  <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/data/"
# file names
raster_simple <- "travel_time_simple.tif"
raster_slope  <- "travel_time_slope.tif"
wp_combined   <- "Waterpoints_Combined_20230912.shp"
districts     <- "LF_DISTRICT.shp"
# construct full file paths
raster_simple_full_path <- file.path(output_path, raster_simple)
raster_slope_full_path  <- file.path(output_path, raster_slope)
wp_combined_full_path   <- file.path(input_path, wp_combined)
districts_full_path     <- file.path(input_path, districts)
# import previously processed data
raster_simple <- raster::raster(raster_simple_full_path)
raster_slope  <- raster::raster(raster_slope_full_path)
waterpoints  <- st_read(wp_combined_full_path, quiet=TRUE) %>% st_transform(4326, quiet=TRUE)
districts_outline    <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
simple_range = range(values(raster_simple))
slope_range = range(values(raster_slope))
# Create a custom color palette from green (0) to red (30)
custom_palette <- colorRampPalette(c("green", "yellow", "orange", "red"))(10)
custom_palette <- colorBin(custom_palette, c(0, 30), 10, pretty = FALSE)
# Create a Leaflet map
map_raster_simple <- leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
setView(147.20, -37.72,zoom = 8) %>%
addPolygons(
data = as(districts_outline, "Spatial"),
smoothFactor = 0.2,
color = 'purple',
weight =0.8,
opacity = 0.5,
fillOpacity = 0
) %>%
addRasterImage(
raster_simple,
project = FALSE,
group = "Minutes",
layerId = "Minutes",
colors = custom_palette,
opacity = 0.5
) %>%
addPolygons(
data = as(waterpoints, "Spatial"),
stroke = FALSE,
smoothFactor = 0.2,
fillColor = 'blue',
fillOpacity = 0.8
) %>%
addImageQuery(
raster_simple,
project = FALSE,
layerId = "Minutes",
digits = 1,
prefix = "Helicopter return"
) %>%
addLegend(
"bottomright",
values = simple_range,
pal = custom_palette,
title = "Time in minutes",
opacity = 0.5
)
# draw map
map_raster_simple
# Create a custom color palette from green (0) to red (30)
custom_palette <- colorRampPalette(c("green", "yellow", "orange", "red"))(10)
custom_palette <- colorBin(custom_palette, c(0, 30), 10, pretty = FALSE)
# Create a Leaflet map
map_raster_simple <- leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
setView(147.20, -37.72,zoom = 8) %>%
addPolygons(
data = as(districts_outline, "Spatial"),
smoothFactor = 0.2,
color = 'purple',
weight =0.8,
opacity = 0.5,
fillOpacity = 0
) %>%
addRasterImage(
raster_simple,
project = TRUE,
group = "Minutes",
layerId = "Minutes",
colors = custom_palette,
opacity = 0.5
) %>%
addPolygons(
data = as(waterpoints, "Spatial"),
stroke = FALSE,
smoothFactor = 0.2,
fillColor = 'blue',
fillOpacity = 0.8
) %>%
addImageQuery(
raster_simple,
project = TRUE,
layerId = "Minutes",
digits = 1,
prefix = "Helicopter return"
) %>%
addLegend(
"bottomright",
values = simple_range,
pal = custom_palette,
title = "Time in minutes",
opacity = 0.5
)
raster_data <- raster(raster_simple_full_path)
compression_options <- list("COMPRESS=DEFLATE", "PREDICTOR=3")  # Adjust as needed
writeRaster(raster_data, file.path(output_path, "raster_simple_compressed"), options = compression_options)
writeRaster(raster_slope, file.path(output_path, "raster_slope_compressed"), options = compression_options)
writeRaster(raster_slope, file.path(output_path, "raster_slope_compressed.tif"), options = compression_options)
writeRaster(raster_simple, file.path(output_path, "raster_simple_compressed.tif"), options = compression_options)
# load necessary libraries
library(sf)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(leafem)
library(raster)
# path locations
output_path <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/outputs"
input_path  <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/data/"
# file names
raster_simple <- "raster_simple_compressed.tif"
raster_slope  <- "raster_slope_compressed.tif"
wp_combined   <- "Waterpoints_Combined_20230912.shp"
districts     <- "LF_DISTRICT.shp"
# construct full file paths
raster_simple_full_path <- file.path(output_path, raster_simple)
raster_slope_full_path  <- file.path(output_path, raster_slope)
wp_combined_full_path   <- file.path(input_path, wp_combined)
districts_full_path     <- file.path(input_path, districts)
# import previously processed data
raster_simple <- raster::raster(raster_simple_full_path)
raster_slope  <- raster::raster(raster_slope_full_path)
waterpoints  <- st_read(wp_combined_full_path, quiet=TRUE) %>% st_transform(4326, quiet=TRUE)
districts_outline    <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
simple_range = range(values(raster_simple))
slope_range = range(values(raster_slope))
districts_outline    <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
knitr::opts_chunk$set(echo = TRUE)
# load necessary libraries
library(sf)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(leafem)
library(raster)
# path locations
output_path <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/outputs"
input_path  <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/data/"
# file names
raster_simple <- "raster_simple_compressed.tif"
raster_slope  <- "raster_slope_compressed.tif"
wp_combined   <- "Waterpoints_Combined_20230912.shp"
districts     <- "LF_DISTRICT.shp"
# construct full file paths
raster_simple_full_path <- file.path(output_path, raster_simple)
raster_slope_full_path  <- file.path(output_path, raster_slope)
wp_combined_full_path   <- file.path(input_path, wp_combined)
districts_full_path     <- file.path(input_path, districts)
# import previously processed data
raster_simple <- raster::raster(raster_simple_full_path)
raster_slope  <- raster::raster(raster_slope_full_path)
waterpoints  <- st_read(wp_combined_full_path, quiet=TRUE) %>% st_transform(4326, quiet=TRUE)
districts_outline    <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
districts_outline <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
# load necessary libraries
library(sf)
library(dplyr)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(leafem)
library(raster)
# path locations
output_path <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/outputs"
input_path  <- "C:/Projects/20230829_HeliWaterPoints/waterpoints/data/"
# file names
raster_simple <- "raster_simple_compressed.tif"
raster_slope  <- "raster_slope_compressed.tif"
wp_combined   <- "Waterpoints_Combined_20230912.shp"
districts     <- "LF_DISTRICT.shp"
# construct full file paths
raster_simple_full_path <- file.path(output_path, raster_simple)
raster_slope_full_path  <- file.path(output_path, raster_slope)
wp_combined_full_path   <- file.path(input_path, wp_combined)
districts_full_path     <- file.path(input_path, districts)
# import previously processed data
raster_simple     <- raster::raster(raster_simple_full_path)
raster_slope      <- raster::raster(raster_slope_full_path)
waterpoints       <- st_read(wp_combined_full_path, quiet=TRUE) %>% st_transform(4326, quiet=TRUE)
districts_outline <- st_read(districts_full_path, quiet = TRUE) %>%
st_transform(4326, quiet = TRUE) %>%
filter(DISTRICT_N == "TAMBO" | DISTRICT_N == "MACALISTER" | DISTRICT_N =="SNOWY" | DISTRICT_N == "LATROBE")
simple_range = range(values(raster_simple))
slope_range = range(values(raster_slope))
writeJPEG(raster_simple, "compressed_raster.jpg", quality = 90)
install.packages(png)
install.packages('png')
install.packages("png")
library(png)
png()
writePNG(raster_simple, file.path(output_path, "raster_simple.png"))
raster_matrix <- raster::extract(raster_simple, raster::extent(raster_simple), buffer = 100)
writePNG(raster_matrix, file.path(output_path, "raster_simple.png"))
raster_matrix <- raster::extract(raster_simple, raster::extent(raster_simple), buffer = 100)
# Define the dimensions of the matrix (e.g., specify the number of rows and columns)
nrows <- ncol <- sqrt(length(raster_matrix))  # You may need to adjust this
# Reshape the vector into a matrix
raster_matrix <- matrix(raster_matrix, nrow = nrows, ncol = ncol)
View(raster_simple)
nrows=1430
ncols=2135
raster_matrix <- matrix(raster_matrix, nrow = nrows, ncol = ncol)
raster_matrix <- raster::extract(raster_simple, raster::extent(raster_simple))
writePNG(raster_matrix, file.path(output_path, "raster_simple.png"))
raster_matrix <- matrix(raster_matrix, nrow = nrows, ncol = ncol)
raster_matrix <- matrix(raster_simple, nrow = nrows, ncol = ncol)
View(raster_matrix)
raster_matrix <- null
raster_matrix <- 0
raster_matrix <- matrix(raster_simple, nrow = nrows, ncol = ncol)
png('file.png', height=nrow(r), width=ncol(r))
png('file.png', height=nrow(raster_simple), width=ncol(raster_simple))
plot(raster_simple, maxpixels=ncell(raster_simple))
dev.off()
png(file.path(output_path, 'raster_simple.png'), height=nrow(raster_simple), width=ncol(raster_simple))
plot(raster_simple, maxpixels=ncell(raster_simple))
dev.off()
png_image_url <- file.path(output_path, 'raster_simple.png')
map_raster_png <- leaflet() %>%
addProviderTiles("OpenStreetMap") %>%
setView(147.20, -37.72, zoom = 8)
map_raster_png <- addRasterImage(
url = png_image_url,
bounds = c(Lat1, Lon1, Lat2, Lon2),  # Specify the bounds (latitude and longitude) of the image overlay
opacity = 0.7  # Adjust opac
raster_extent <- extent(raster_simple)
raster_extent <- extent(raster_simple)
# Extract the minimum and maximum latitude and longitude values
min_lat <- raster_extent@ymin
max_lat <- raster_extent@ymax
min_lon <- raster_extent@xmin
max_lon <- raster_extent@xmax
map_raster_png <- addRasterImage(
url = png_image_url,
bounds = c(min_lat, min_lon, max_lat, max_lon),  # Specify the bounds (latitude and longitude) of the image overlay
opacity = 0.7  # Adjust opacity as needed
)
